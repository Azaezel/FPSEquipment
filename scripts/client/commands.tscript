//keybind methods
function mouseFire(%val)
{
   $mvTriggerCount0++;
}

function gamepadFire(%val)
{
   if(%val > 0.1 && !$gamepadFireTriggered)
   {
      $gamepadFireTriggered = true;
      $mvTriggerCount0++;
   }
   else if(%val <= 0.1 && $gamepadFireTriggered)
   {
      $gamepadFireTriggered = false;
      $mvTriggerCount0++;
   }
}

function gamepadAltTrigger(%val)
{
   if(%val > 0.1 && !$gamepadAltTriggerTriggered)
   {
      $gamepadAltTriggerTriggered = true;
      $mvTriggerCount1++;
   }
   else if(%val <= 0.1 && $gamepadAltTriggerTriggered)
   {
      $gamepadAltTriggerTriggered = false;
      $mvTriggerCount1++;
   }
}

function toggleZoomFOV()
{
    $Player::CurrentFOV = $Player::CurrentFOV / 2;

    if($Player::CurrentFOV < 5)
        resetCurrentFOV();

    if(ServerConnection.zoomed)
      setFOV($Player::CurrentFOV);
    else
    {
      setFov(ServerConnection.getControlCameraDefaultFov());
    }
}

function resetCurrentFOV()
{
   $Player::CurrentFOV = ServerConnection.getControlCameraDefaultFov() / 2;
}

function turnOffZoom()
{
   ServerConnection.zoomed = false;
   setFov(ServerConnection.getControlCameraDefaultFov());
   Reticle.setVisible(true);
   zoomReticle.setVisible(false);

   // Rather than just disable the DOF effect, we want to set it to the level's
   // preset values.
   //DepthOfFieldPostFX.disable();
   ppOptionsUpdateDOFSettings();
}

function setZoomFOV(%val)
{
   if(%val)
      toggleZoomFOV();
}

function toggleZoom(%val)
{
   if (%val)
   {
      ServerConnection.zoomed = true;
      setFov($Player::CurrentFOV);
      Reticle.setVisible(false);
      if (zoomReticle.getBitmap())
        zoomReticle.setVisible(true);

      DepthOfFieldPostFX.setAutoFocus( true );
      DepthOfFieldPostFX.setFocusParams( 0.5, 0.5, 50, 500, -5, 5 );
      DepthOfFieldPostFX.enable();
   }
   else
   {
      turnOffZoom();
   }
}

function mouseButtonZoom(%val)
{
   toggleZoom(%val);
}

function unmountWeapon(%val)
{
   if (%val)
      commandToServer('unmountWeapon');
}

function throwWeapon(%val)
{
   if (%val)
      commandToServer('Throw', "Weapon");
}
function tossAmmo(%val)
{
   if (%val)
      commandToServer('Throw', "Ammo");
}

function nextWeapon(%val)
{
   if (%val)
      commandToServer('cycleWeapon', "next");
}

function prevWeapon(%val)
{
   if (%val)
      commandToServer('cycleWeapon', "prev");
}

function mouseWheelWeaponCycle(%val)
{
   if (%val < 0)
      commandToServer('cycleWeapon', "next");
   else if (%val > 0)
      commandToServer('cycleWeapon', "prev");
}

// ----------------------------------------------------------------------------
// WeaponHUD
// ----------------------------------------------------------------------------

// Update the Ammo Counter with current ammo, if not any then hide the counter.
function clientCmdSetAmmoAmountHud(%amount, %amountInClips)
{
   if (!%amount)
      AmmoAmount.setVisible(false);
   else
   {
      AmmoAmount.setVisible(true);
      AmmoAmount.setText("Ammo: " @ %amount @ "/" @ %amountInClips);
   }
}

// Here we update the Weapon Preview image & reticle for each weapon.  We also
// update the Ammo Counter (just so we don't have to call it separately).
// Passing an empty parameter ("") hides the HUD component.

function clientCmdRefreshWeaponHUD(%amount, %preview, %ret, %zoomRet, %amountInClips)
{
   if (!%amount)
      AmmoAmount.setVisible(false);
   else
   {
      AmmoAmount.setVisible(true);
      AmmoAmount.setText("Ammo: " @ %amount @ "/" @ %amountInClips);
   }

   if (%preview $= "" || detag(%preview) $= "blank")
   {
      WeaponHUD.setVisible(false);
      WeaponHUD.setBitmap("");
   }
   else
   {
      WeaponHUD.setVisible(true);
      PreviewImage.setbitmap(detag(%preview) @"_image");
   }

   if (%ret $= "" || detag(%ret) $= "blank")
   {
      Reticle.setVisible(false);
      Reticle.setBitmap("");
   }
   else
   {
      Reticle.setVisible(true);
      Reticle.setbitmap(detag(%ret) @"_image");
   }

   if (isObject(ZoomReticle) || detag(%zoomRet) $= "blank")
   {
      if (%zoomRet $= "" || detag(%zoomRet) $= "blank")
      {
         ZoomReticle.setVisible(false);
         ZoomReticle.setBitmap("");
      }
      else
      {
         ZoomReticle.setVisible(true);
         ZoomReticle.setBitmap(detag(%zoomRet) @"_image");
      }
   }
}

// ----------------------------------------------------------------------------
// Turret Support
// ----------------------------------------------------------------------------

// Call by the Turret class when a player mounts or unmounts it.
// %turret = The turret that was mounted
// %player = The player doing the mounting
// %mounted = True if the turret was mounted, false if it was unmounted
function turretMountCallback(%turret, %player, %mounted)
{
   //echo ( "\c4turretMountCallback -> " @ %mounted );

   if (%mounted)
   {
      // Push the action map
      turretMap.push();
   }
   else
   {
      // Pop the action map
      turretMap.pop();
   }
}
